

- overall how session memory works
- demo 1; how it should work with e.g. a window
- demo 2; listeners
- jprofiler memory view, root cause
- demo 3; CDI



demo:

deploy all apps in wildfly 10, open http://localhost:8080/memleaks-0.0.1-SNAPSHOT/
show the button, say that the window generates 100 MB of String data for testing purposes.
open JProfiler, attach to wildfly. open the memory telemetry view that shows total JVM memory.
Run GC from Jprofiler to get a clean slate. the memory should drop quite a bit; the JVM is lazy with GC if it doesn't need more memory
click the button, and show how the memory usage jumps. close it, run gc, and it drops back.
this is what we want; when we remove a vaadin component from the ui (and all refs), it is GC:d.

switch jprofiler to memory -> allocated objects, and start recording. 
refresh the browser twice.
filter the allocation (bottom bar) with e.g. 'thomas', showing our objects
not that there is two UIs there; we refreshed twice, so that's as it should be. 
run GC, and one of them should go away. stop recording.

time for the first demo; listener. open http://localhost:8080/memleaks-listener-0.0.1-SNAPSHOT/
the demo is a UI that receives irregular updates from the backend and updates the UI with Push.
this demo has a bug in it; UIs that are closed stay in memory.
demonstrate this with the same memory recording as you just did, refresh browser twice.
now, when you run the GC there are still 2 UIs. if you refresh multiple times, they just increase. you have a leak.

now, the fun part. why are the UIs not cleaned?
stop the recording and start it again to get a clean slate. refresh the browser twice.
JProfiler has a great tool for finding GC issues, but it is a bit hidden.
right click on the ui object and select the first option, 'show in heap'. click ok.
switch to the 'references' tab. find the UI object with closing = true (the other one is the live UI that should be there)
right click, 'show in graph' there are a lot of refs, so right click on the UI object, and 'remove all but selected'
then, the magic; right click, 'show CG Root'.
oh, our PushNotifierService is the reason! the service keeps a reference to the UI, through an ArrayList. let's take a look at the code.

open MyUI in the notifier project. on start, it registers itself to a Service to receive information. but that ref isn't removed!
so, options? both close() and detach() are options (commented out).
also, the service could use a weak reference. show that too.
the service could be whatever; in this case, it's static so the list is never cleaned by GC
this is of course a very straightforward example; the same problem will occur when storing a reference to ANY vaadin component from outside the Vaadin app.

Time for a less straightforward example; CDI
http://localhost:8080/memleaks-cdi-0.0.1-SNAPSHOT/
same as first example, except we use CDI to create a Window when we need it. We use the recommended way to programmatically create CDI beans.
open JProfiler, and stop memory recording. Go to Telemetry->memory and do a GC.
now, when you open windows and close them, most of the memory is still allocated, even after CG. open and close the window a few times to demonstrate.
As you might have guessed, we are using CDI wrong and it doesn't dispose of the windows.

show the code, where we use CDI.getCurrent.select() to get an Instance reference, that we use to create the Windows.
This is normally fine, because the Window is @Dependent, and uses the same scope as the UI. 
But, as you can see in the code, we refer to an EJB in the window. This messes CDI up, and it can't automatically release the Window anymore.
So, we need to destroy the reference ourselves, the code is commented out.
before that though, let's take a look if JProfiler can help us. It can!

open the UI, start memory recording, open a window, close the window. JProfiler should show the HoggerWindow reference.
just do the same thing as before; it leads to CDI (Weld is Wildflys CDI implementation) this time, which isn't as straightforward as in the previous example, but gives us a hint that there is an issue with CDI. So, usually a scope issue, double check your annotations and how you create the bean.

